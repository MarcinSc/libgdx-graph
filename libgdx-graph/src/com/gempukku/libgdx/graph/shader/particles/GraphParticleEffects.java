package com.gempukku.libgdx.graph.shader.particles;

import com.gempukku.libgdx.graph.shader.particles.generator.ParticleGenerator;

/**
 * Main interface that is used to work with particle effects. Any operation done on the particle effects should
 * be done through this interface.
 */
public interface GraphParticleEffects {
    /**
     * Creates a new particle effect with the given tag (as defined in the pipeline).
     * The particles generated by this effect will be generated using the provided particle generator.
     *
     * @param tag               Tag identifying the particle effect to generate.
     * @param particleGenerator Particle generator used to generate particles.
     * @return Generated id of the particle effect, it is used to identify the particle effect.
     */
    String createEffect(String tag, ParticleGenerator particleGenerator);

    <T> String createEffect(String tag, ParticleGenerator<T> particleGenerator, Class<T> particleDataClass);

    /**
     * Starts generation of particles for the identified effect.
     *
     * @param effectId Id of the effect to start.
     */
    void startEffect(String effectId);

    /**
     * Update all particles in the identified effect.
     *
     * @param effectId        Id of the effect to update.
     * @param particleUpdater A class that is called to update each particle.
     */
    void updateParticles(String effectId, ParticleUpdater particleUpdater);

    <T> void updateParticles(String effectId, ParticleUpdater<T> particleUpdater, Class<T> particleDataClass);

    /**
     * Stops generation of particles for the identified effect.
     *
     * @param effectId Id of the effect to stop.
     */
    void stopEffect(String effectId);

    /**
     * Destroys the identified effect.
     *
     * @param effectId Id of the effect to destroy.
     */
    void destroyEffect(String effectId);

    /**
     * Sets property on the given particle effect.
     *
     * @param effectId Effect id.
     * @param name     Name of the property.
     * @param value    Value of the property.
     */
    void setProperty(String effectId, String name, Object value);

    /**
     * Un-sets the property from the given particle effect. If the property is un-set, the default value for that
     * property will be used (specified in the Graph editor).
     *
     * @param effectId Effect id.
     * @param name     Name of the property.
     */
    void unsetProperty(String effectId, String name);

    /**
     * Returns the value of a property from the given particle effect.
     * Please note - that if the property is not set on the model instance, a null is returned and NOT the default
     * value (from Graph editor).
     *
     * @param effectId Effect id.
     * @param name     Name of the property.
     * @return Value of the property.
     */
    Object getProperty(String effectId, String name);
}
